#!/usr/bin/env python3
# buttons_node.py
# ‰ΩúÁî®ÔºöËß£Êûê Oculus ÊâãÊüÑÊåâÈíÆÊ∂àÊÅØÔºåÂèëÂ∏ÉÂØπÂ∫îÁöÑÊéßÂà∂Êåá‰ª§ÔºàËØùÈ¢ò/ÂèÇÊï∞Ôºâ

import rclpy
from rclpy.node import Node
from std_msgs.msg import String, Bool, Float32
from geometry_msgs.msg import Twist
from rcl_interfaces.msg import ParameterEvent
import json


class ButtonsNode(Node):
    def __init__(self):
        super().__init__("buttons_node")

        # ËÆ¢ÈòÖÊåâÈíÆËæìÂÖ•
        self.subscription = self.create_subscription(
            String, "/oculus/buttons", self.listener_callback, 10
        )

        # Á¶ªÊï£Áä∂ÊÄÅÊéßÂà∂
        self.reset_pub = self.create_publisher(Bool, "/teleop/reset_pose", 1)
        self.workspace_pub = self.create_publisher(String, "/teleop/workspace_zone", 10)
        # self.gripper_rotation = self.create_publisher(Twist, "/teleop/gripper_rotation", 10)
        # ËøûÁª≠ÊéßÂà∂ÔºàÂä®‰ΩúÔºâ
        self.base_pub = self.create_publisher(Twist, "/teleop/base_cmd", 10)
        self.gripper_pub = self.create_publisher(Bool, "/teleop/gripper_cmd", 10)
        self.lift_pub = self.create_publisher(String, "/teleop/lift_cmd", 10)
        self.enable_pub = self.create_publisher(Bool, "/teleop/enable", 10)
        # Â§¥ÈÉ®ÊóãËΩ¨
        self.head_pub = self.create_publisher(Twist, "/teleop/head_cmd", 10)
        # ÊéßÂà∂ÊØî‰æãÔºàÂø´ÊÖ¢ÂàáÊç¢Ôºâ
        # self.declare_parameter("control_scale", 1.0)  # ÈªòËÆ§1.0ÔºàÂø´Ôºâ
        self.reseting = False
        self.last_reset_button = False
        self.last_mode_button = False
        # Áä∂ÊÄÅÁºìÂ≠ò
        self.last_gripper_state = None  # ÈÅøÂÖçÈáçÂ§çÂèë
        self.last_buttons = {}

    def listener_callback(self, msg):
        try:
            buttons = json.loads(msg.data)
        except json.JSONDecodeError:
            self.get_logger().warn("ÊåâÈíÆJSONËß£ÊûêÂ§±Ë¥•")
            return

        self.last_buttons = buttons

        # === Âè≥ÊâãÁ¶ªÊï£ÂäüËÉΩ ===
        cur_reset_button = buttons.get("B")
        if not buttons.get("A"):
            if cur_reset_button != self.last_reset_button:
                self.last_reset_button = cur_reset_button
                if cur_reset_button and not self.reseting:
                    self.get_logger().info("üîÑ ÈáçÁΩÆÊú∫Âô®‰∫∫Êú´Á´Ø‰ΩçÂßø")
                    self.reseting = True
                    self.reset_pub.publish(Bool(data=True))
                elif cur_reset_button and self.reseting:
                    self.get_logger().info("‚úÖ ÁªìÊùüÈáçÁΩÆÊ®°Âºè")
                    self.reseting = False
                    self.reset_pub.publish(Bool(data=False))

        if buttons.get("A") and buttons.get("Y"):
            # self.get_logger().info("ÂàáÊç¢Â∑•‰ΩúÂå∫Èó¥: È´ò")
            self.reseting = True
            self.reset_pub.publish(Bool(data=True))
            self.workspace_pub.publish(String(data="high"))

        if buttons.get("A") and buttons.get("B"):
            # self.get_logger().info("ÂàáÊç¢Â∑•‰ΩúÂå∫Èó¥: ‰∏≠")
            self.reseting = True
            self.reset_pub.publish(Bool(data=True))
            self.workspace_pub.publish(String(data="mid"))

        if buttons.get("A") and buttons.get("X"):
            # self.get_logger().info("ÂàáÊç¢Â∑•‰ΩúÂå∫Èó¥: ‰Ωé")
            self.reseting = True
            self.reset_pub.publish(Bool(data=True))
            self.workspace_pub.publish(String(data="low"))

        # === Â∑¶ÊâãÁ¶ªÊï£ÂäüËÉΩ ===
        # cur_mode_button = buttons.get("X")
        # if not buttons.get("A"):
            # if cur_mode_button != self.last_mode_button and cur_mode_button:
            #     new_scale = (
            #         0.5
            #         if self.get_parameter("control_scale")
            #         .get_parameter_value()
            #         .double_value
            #         > 0.9
            #         else 1.0
            #     )
            #     self.set_parameters(
            #         [
            #             rclpy.parameter.Parameter(
            #                 name="control_scale",
            #                 value=new_scale,
            #             )
            #         ]
            #     )
            #     self.get_logger().info(f"ÂàáÊç¢ÊéßÂà∂ÊØî‰æã‰∏∫ {new_scale}")
            # self.last_mode_button = cur_mode_button

        if buttons.get("Y") and not buttons.get("A"):
            self.reseting = True
            self.reset_pub.publish(Bool(data=True))
            self.enable_pub.publish(Bool(data=True))
            self.get_logger().info("‚úÖ ‰ΩøËÉΩÂ∑≤ÂèëÂ∏É")

        # === ËøûÁª≠ÂÄºÊéßÂà∂ÔºöÂè≥Êâã Joystick ÊéßÂà∂Â∫ïÁõò ===
        if "leftJS" in buttons :
            x, y = buttons["leftJS"]
            twist = Twist()
            twist.linear.x = y  # ÂâçÂêé
            twist.angular.z = -x  # Â∑¶Âè≥ËΩ¨ÔºàÂè≥‰∏∫Ë¥üÔºâ
            self.base_pub.publish(twist)

        # if "leftJS" in buttons and buttons.get("A"):
        #     x, y = buttons["leftJS"]
        #     if abs(x) > 0.5:
        #         twist = Twist()
        #         twist.linear.x = -x
        #         self.gripper_rotation.publish(twist)  # Â§πÁà™ÊóãËΩ¨ÔºàÂè≥‰∏∫Ë¥üÔºâ
        # === Â§¥ÈÉ®ÊóãËΩ¨ ===
        # if "leftJS" in buttons:
        #     x, y = buttons["leftJS"]
        #     twist = Twist()
            # if abs(x) > abs(y):
            #     twist.angular.y = 0.0  # ‰∏ä‰∏ãËΩ¨Ôºà‰∏ä‰∏∫Ë¥üÔºâ
            #     twist.angular.x = x  # Â∑¶Âè≥ËΩ¨ÔºàÂ∑¶‰∏∫Ë¥üÔºâ
            #     self.head_pub.publish(twist)
            # elif abs(y) > abs(x):
            #     twist.angular.y = y  # ‰∏ä‰∏ãËΩ¨Ôºà‰∏ä‰∏∫Ë¥üÔºâ
            #     twist.angular.x = 0.0  # Â∑¶Âè≥ËΩ¨ÔºàÂ∑¶‰∏∫Ë¥üÔºâ
            #     self.head_pub.publish(twist)

        # === Trigger ÊéßÂà∂Â§πÁà™ ===
        trigger_value = buttons.get("rightTrig", [0.0])[0]
        # self.get_logger().info(f"trigger_value: {trigger_value}")
        if trigger_value > 0.5:
            if self.last_gripper_state is not False:
                # self.get_logger().info("send gripper close")
                self.last_gripper_state = False
                self.gripper_pub.publish(Bool(data=False))  # Èó≠Âêà
        elif trigger_value < 0.5 and trigger_value > 0.0:
            if self.last_gripper_state is not True:
                # self.get_logger().info("send gripper open")
                self.last_gripper_state = True
                self.gripper_pub.publish(Bool(data=True))  # ÊâìÂºÄ

        # === ÂçáÈôçÊéßÂà∂ ===
        # if buttons.get("leftTrig", [0.0])[0] > 0.5:
        #     self.lift_pub.publish(String(data="up"))
        # elif buttons.get("leftGrip", [0.0])[0] > 0.5:
        #     self.lift_pub.publish(String(data="down"))


def main(args=None):
    rclpy.init(args=args)
    node = ButtonsNode()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()


if __name__ == "__main__":
    main()
